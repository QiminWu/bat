from ConfigParser import SafeConfigParser
import urllib
from obspy.iris import Client
from xml.etree.ElementTree import XML, fromstring, tostring

class Event(object):
    def __init__(self,id,region,lat,lon,otime,mag):
        self.id = id
        self.region = region
        self.lat = lat
        self.lon = lon
        self.otime = otime
        self.mag = mag
    def __str__(self):
        #return ('EventID: %s ---> %s %s %s %s %s')%(self.id,self.region,self.otime,self.mag,self.lat,self.lon)
        return 'EventID: {0:10} ---> {1:35} {2:30} {3:10}{4:12}{5:12}'.format(self.id,self.region,self.otime,self.mag,self.lat,self.lon)

def init():
    cDict = {}
    parser = SafeConfigParser()
    parser.read('global.conf')
    for section_name in parser.sections():
        for name, value in parser.items(section_name):
            cDict[name]=value
    return cDict

def parseEventXml(searchparameter):
    
    EL = []
    client = Client()
    events = client.getEvents(format='xml', minmag=searchparameter['magmin'], starttime=searchparameter['date_min'], endtime=searchparameter['date_max'], orderby='time',limit = searchparameter['resultlimit'])

    root = fromstring(events)
    rt = '{http://quakeml.org/xmlns/bed/1.2}'
    
    region=''
    lat=''
    lon=''
    otime=''
    mag = ''
    eventid = ''
    
    for child in root:
       for a in child:
           eventid = a.attrib['publicID'].split('=')[1]
           for b in a:
               if b.tag == rt+'description':
                   for c in b:
                       if c.tag == rt+'text':
                           region = c.text
               if b.tag == rt+'origin':
                   for d in b:
                       if d.tag == rt+'time':
                           for e in d:
                               otime = e.text
                       if d.tag == rt+'latitude':
                           for e in d:
                               lat = e.text
                       if d.tag == rt+'longitude':
                           for e in d:
                               lon = e.text
               if b.tag == rt+'magnitude':
                   for f in b:
                       if f.tag == rt+'mag':
                            for g in f:
                                mag = g.text
           EL.append(Event(eventid,region,lat,lon,otime,mag))

    print '\n\n                        # to get data for event use eventID #\n\n'
    for i in EL:
        print i
    
    '''
    
    mainurl = 'http://service.iris.edu/fdsnws/event/1/query?'
    parameter = urllib.urlencode({'starttime':searchparameter['date_min'],
                                  'endtime':searchparameter['date_max'],
                                  'minmag':searchparameter['magmin'],
                                  'limit':searchparameter['resultlimit'],
                                  'format':'text',
                                  'orderby':'time',
                                  'catalog':searchparameter['catalog']
                                  })
    url= ('%s%s')%(mainurl,parameter)
    #print 'Requesting ',url
    '''
    '''
    try:
        print '\n\n                        # to get data for event use eventID #\n\n'
        url= ('%s%s')%(mainurl,parameter)
        print url
        for i in urllib.urlopen(url):
            print i
            if i[0] != '#':
                i = i.split('|')
                print ('EventID: %s --> %s %s %s')%(i[0],i[1],i[10],i[12])

    except:
        print '\033[31m No event entry found \033[0m\n'
    '''


def searchEvent(searchparameter):
    
    parseEventXml(searchparameter)
    

if __name__ == "__main__":
    options = init()
    searchEvent(options)

